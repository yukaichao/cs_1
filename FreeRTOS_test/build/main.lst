ARM GAS  /tmp/ccSyKYKX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_TIM_PeriodElapsedCallback
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_TIM_PeriodElapsedCallback:
  27              	.LVL0:
  28              	.LFB137:
  29              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** #include "adc.h"
  24:Core/Src/main.c **** #include "dma.h"
  25:Core/Src/main.c **** #include "i2c.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
ARM GAS  /tmp/ccSyKYKX.s 			page 2


  30:Core/Src/main.c **** #include "oled.h"
  31:Core/Src/main.c **** #include "bmp.h"
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** uint32_t AD_TwoChanel_value[2];
  37:Core/Src/main.c **** /* USER CODE END PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PD */
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/main.c **** void SystemClock_Config(void);
  56:Core/Src/main.c **** void MX_FREERTOS_Init(void);
  57:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END PFP */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE END 0 */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /**
  67:Core/Src/main.c ****   * @brief  The application entry point.
  68:Core/Src/main.c ****   * @retval int
  69:Core/Src/main.c ****   */
  70:Core/Src/main.c **** int main(void)
  71:Core/Src/main.c **** {
  72:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c ****   /* USER CODE END 1 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  79:Core/Src/main.c ****   HAL_Init();
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE END Init */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* Configure the system clock */
  86:Core/Src/main.c ****   SystemClock_Config();
ARM GAS  /tmp/ccSyKYKX.s 			page 3


  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* USER CODE END SysInit */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* Initialize all configured peripherals */
  93:Core/Src/main.c ****   MX_GPIO_Init();
  94:Core/Src/main.c ****   MX_DMA_Init();
  95:Core/Src/main.c ****   MX_ADC1_Init();
  96:Core/Src/main.c ****   MX_I2C1_Init();
  97:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  98:Core/Src/main.c **** 	OLED_Init();
  99:Core/Src/main.c **** 	OLED_ShowString(OLED_1,0,1,"oled1_ok",16);
 100:Core/Src/main.c **** 	OLED_ShowString(OLED_2,0,1,"oled2_ok",16);
 101:Core/Src/main.c **** 	HAL_Delay(1);
 102:Core/Src/main.c **** 	OLED_Refreash();
 103:Core/Src/main.c **** 	HAL_Delay(40);
 104:Core/Src/main.c **** 	OLED_Refreash();
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** 	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&AD_TwoChanel_value,2);
 107:Core/Src/main.c ****   /* USER CODE END 2 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* Call init function for freertos objects (in freertos.c) */
 110:Core/Src/main.c ****   MX_FREERTOS_Init();
 111:Core/Src/main.c ****   /* Start scheduler */
 112:Core/Src/main.c ****   osKernelStart();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 115:Core/Src/main.c ****   /* Infinite loop */
 116:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 117:Core/Src/main.c ****   while (1)
 118:Core/Src/main.c ****   {
 119:Core/Src/main.c ****     /* USER CODE END WHILE */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 122:Core/Src/main.c ****   }
 123:Core/Src/main.c ****   /* USER CODE END 3 */
 124:Core/Src/main.c **** }
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** /**
 127:Core/Src/main.c ****   * @brief System Clock Configuration
 128:Core/Src/main.c ****   * @retval None
 129:Core/Src/main.c ****   */
 130:Core/Src/main.c **** void SystemClock_Config(void)
 131:Core/Src/main.c **** {
 132:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 133:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 136:Core/Src/main.c ****   */
 137:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 138:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 139:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 140:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 143:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
ARM GAS  /tmp/ccSyKYKX.s 			page 4


 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 150:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 151:Core/Src/main.c ****   {
 152:Core/Src/main.c ****     Error_Handler();
 153:Core/Src/main.c ****   }
 154:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 155:Core/Src/main.c ****   */
 156:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 157:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 158:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 159:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 160:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 161:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 164:Core/Src/main.c ****   {
 165:Core/Src/main.c ****     Error_Handler();
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c **** }
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** /* USER CODE END 4 */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****  /**
 174:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 175:Core/Src/main.c ****   * @note   This function is called  when TIM14 interrupt took place, inside
 176:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 177:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 178:Core/Src/main.c ****   * @param  htim : TIM handle
 179:Core/Src/main.c ****   * @retval None
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 182:Core/Src/main.c **** {
  30              		.loc 1 182 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 182 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
 183:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 186:Core/Src/main.c ****   if (htim->Instance == TIM14) {
  40              		.loc 1 186 3 is_stmt 1 view .LVU2
  41              		.loc 1 186 11 is_stmt 0 view .LVU3
  42 0002 0268     		ldr	r2, [r0]
  43              		.loc 1 186 6 view .LVU4
ARM GAS  /tmp/ccSyKYKX.s 			page 5


  44 0004 034B     		ldr	r3, .L5
  45 0006 9A42     		cmp	r2, r3
  46 0008 00D0     		beq	.L4
  47              	.LVL1:
  48              	.L1:
 187:Core/Src/main.c ****     HAL_IncTick();
 188:Core/Src/main.c ****   }
 189:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 192:Core/Src/main.c **** }
  49              		.loc 1 192 1 view .LVU5
  50 000a 08BD     		pop	{r3, pc}
  51              	.LVL2:
  52              	.L4:
 187:Core/Src/main.c ****     HAL_IncTick();
  53              		.loc 1 187 5 is_stmt 1 view .LVU6
  54 000c FFF7FEFF 		bl	HAL_IncTick
  55              	.LVL3:
  56              		.loc 1 192 1 is_stmt 0 view .LVU7
  57 0010 FBE7     		b	.L1
  58              	.L6:
  59 0012 00BF     		.align	2
  60              	.L5:
  61 0014 00200040 		.word	1073750016
  62              		.cfi_endproc
  63              	.LFE137:
  65              		.section	.text.Error_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	Error_Handler
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	Error_Handler:
  74              	.LFB138:
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** /**
 195:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 196:Core/Src/main.c ****   * @retval None
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c **** void Error_Handler(void)
 199:Core/Src/main.c **** {
  75              		.loc 1 199 1 is_stmt 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
 200:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 201:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 202:Core/Src/main.c ****   __disable_irq();
  81              		.loc 1 202 3 view .LVU9
  82              	.LBB4:
  83              	.LBI4:
  84              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
ARM GAS  /tmp/ccSyKYKX.s 			page 6


   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
ARM GAS  /tmp/ccSyKYKX.s 			page 7


  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccSyKYKX.s 			page 8


 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  85              		.loc 2 140 27 view .LVU10
  86              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  87              		.loc 2 142 3 view .LVU11
  88              		.syntax unified
  89              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  90 0000 72B6     		cpsid i
  91              	@ 0 "" 2
  92              		.thumb
  93              		.syntax unified
  94              	.L8:
  95              	.LBE5:
  96              	.LBE4:
 203:Core/Src/main.c ****   while (1)
  97              		.loc 1 203 3 discriminator 1 view .LVU12
 204:Core/Src/main.c ****   {
 205:Core/Src/main.c ****   }
  98              		.loc 1 205 3 discriminator 1 view .LVU13
 203:Core/Src/main.c ****   while (1)
  99              		.loc 1 203 9 discriminator 1 view .LVU14
 100 0002 FEE7     		b	.L8
 101              		.cfi_endproc
 102              	.LFE138:
 104              		.section	.text.SystemClock_Config,"ax",%progbits
 105              		.align	1
 106              		.global	SystemClock_Config
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 110              		.fpu fpv4-sp-d16
 112              	SystemClock_Config:
ARM GAS  /tmp/ccSyKYKX.s 			page 9


 113              	.LFB136:
 131:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 114              		.loc 1 131 1 view -0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 80
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 00B5     		push	{lr}
 119              	.LCFI1:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 14, -4
 122 0002 95B0     		sub	sp, sp, #84
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 88
 132:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 125              		.loc 1 132 3 view .LVU16
 132:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 126              		.loc 1 132 22 is_stmt 0 view .LVU17
 127 0004 3022     		movs	r2, #48
 128 0006 0021     		movs	r1, #0
 129 0008 08A8     		add	r0, sp, #32
 130 000a FFF7FEFF 		bl	memset
 131              	.LVL4:
 133:Core/Src/main.c **** 
 132              		.loc 1 133 3 is_stmt 1 view .LVU18
 133:Core/Src/main.c **** 
 133              		.loc 1 133 22 is_stmt 0 view .LVU19
 134 000e 0023     		movs	r3, #0
 135 0010 0393     		str	r3, [sp, #12]
 136 0012 0493     		str	r3, [sp, #16]
 137 0014 0593     		str	r3, [sp, #20]
 138 0016 0693     		str	r3, [sp, #24]
 139 0018 0793     		str	r3, [sp, #28]
 137:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 140              		.loc 1 137 3 is_stmt 1 view .LVU20
 141              	.LBB6:
 137:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 142              		.loc 1 137 3 view .LVU21
 143 001a 0193     		str	r3, [sp, #4]
 137:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 144              		.loc 1 137 3 view .LVU22
 145 001c 204A     		ldr	r2, .L15
 146 001e 116C     		ldr	r1, [r2, #64]
 147 0020 41F08051 		orr	r1, r1, #268435456
 148 0024 1164     		str	r1, [r2, #64]
 137:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 149              		.loc 1 137 3 view .LVU23
 150 0026 126C     		ldr	r2, [r2, #64]
 151 0028 02F08052 		and	r2, r2, #268435456
 152 002c 0192     		str	r2, [sp, #4]
 137:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 153              		.loc 1 137 3 view .LVU24
 154 002e 019A     		ldr	r2, [sp, #4]
 155              	.LBE6:
 137:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 156              		.loc 1 137 3 view .LVU25
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 157              		.loc 1 138 3 view .LVU26
ARM GAS  /tmp/ccSyKYKX.s 			page 10


 158              	.LBB7:
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 159              		.loc 1 138 3 view .LVU27
 160 0030 0293     		str	r3, [sp, #8]
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 161              		.loc 1 138 3 view .LVU28
 162 0032 1C4B     		ldr	r3, .L15+4
 163 0034 1A68     		ldr	r2, [r3]
 164 0036 42F48042 		orr	r2, r2, #16384
 165 003a 1A60     		str	r2, [r3]
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 166              		.loc 1 138 3 view .LVU29
 167 003c 1B68     		ldr	r3, [r3]
 168 003e 03F48043 		and	r3, r3, #16384
 169 0042 0293     		str	r3, [sp, #8]
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 170              		.loc 1 138 3 view .LVU30
 171 0044 029B     		ldr	r3, [sp, #8]
 172              	.LBE7:
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 173              		.loc 1 138 3 view .LVU31
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 174              		.loc 1 142 3 view .LVU32
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 175              		.loc 1 142 36 is_stmt 0 view .LVU33
 176 0046 0123     		movs	r3, #1
 177 0048 0893     		str	r3, [sp, #32]
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 178              		.loc 1 143 3 is_stmt 1 view .LVU34
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 179              		.loc 1 143 30 is_stmt 0 view .LVU35
 180 004a 4FF48033 		mov	r3, #65536
 181 004e 0993     		str	r3, [sp, #36]
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 182              		.loc 1 144 3 is_stmt 1 view .LVU36
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 183              		.loc 1 144 34 is_stmt 0 view .LVU37
 184 0050 0222     		movs	r2, #2
 185 0052 0E92     		str	r2, [sp, #56]
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 186              		.loc 1 145 3 is_stmt 1 view .LVU38
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 187              		.loc 1 145 35 is_stmt 0 view .LVU39
 188 0054 4FF48003 		mov	r3, #4194304
 189 0058 0F93     		str	r3, [sp, #60]
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 190              		.loc 1 146 3 is_stmt 1 view .LVU40
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 191              		.loc 1 146 30 is_stmt 0 view .LVU41
 192 005a 0423     		movs	r3, #4
 193 005c 1093     		str	r3, [sp, #64]
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 194              		.loc 1 147 3 is_stmt 1 view .LVU42
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 195              		.loc 1 147 30 is_stmt 0 view .LVU43
 196 005e A821     		movs	r1, #168
 197 0060 1191     		str	r1, [sp, #68]
ARM GAS  /tmp/ccSyKYKX.s 			page 11


 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 198              		.loc 1 148 3 is_stmt 1 view .LVU44
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 199              		.loc 1 148 30 is_stmt 0 view .LVU45
 200 0062 1292     		str	r2, [sp, #72]
 149:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 201              		.loc 1 149 3 is_stmt 1 view .LVU46
 149:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 202              		.loc 1 149 30 is_stmt 0 view .LVU47
 203 0064 1393     		str	r3, [sp, #76]
 150:Core/Src/main.c ****   {
 204              		.loc 1 150 3 is_stmt 1 view .LVU48
 150:Core/Src/main.c ****   {
 205              		.loc 1 150 7 is_stmt 0 view .LVU49
 206 0066 08A8     		add	r0, sp, #32
 207 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 208              	.LVL5:
 150:Core/Src/main.c ****   {
 209              		.loc 1 150 6 view .LVU50
 210 006c 98B9     		cbnz	r0, .L13
 156:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 211              		.loc 1 156 3 is_stmt 1 view .LVU51
 156:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 212              		.loc 1 156 31 is_stmt 0 view .LVU52
 213 006e 0F23     		movs	r3, #15
 214 0070 0393     		str	r3, [sp, #12]
 158:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 215              		.loc 1 158 3 is_stmt 1 view .LVU53
 158:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 216              		.loc 1 158 34 is_stmt 0 view .LVU54
 217 0072 0223     		movs	r3, #2
 218 0074 0493     		str	r3, [sp, #16]
 159:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 219              		.loc 1 159 3 is_stmt 1 view .LVU55
 159:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 220              		.loc 1 159 35 is_stmt 0 view .LVU56
 221 0076 0023     		movs	r3, #0
 222 0078 0593     		str	r3, [sp, #20]
 160:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 223              		.loc 1 160 3 is_stmt 1 view .LVU57
 160:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 224              		.loc 1 160 36 is_stmt 0 view .LVU58
 225 007a 4FF4A053 		mov	r3, #5120
 226 007e 0693     		str	r3, [sp, #24]
 161:Core/Src/main.c **** 
 227              		.loc 1 161 3 is_stmt 1 view .LVU59
 161:Core/Src/main.c **** 
 228              		.loc 1 161 36 is_stmt 0 view .LVU60
 229 0080 4FF48053 		mov	r3, #4096
 230 0084 0793     		str	r3, [sp, #28]
 163:Core/Src/main.c ****   {
 231              		.loc 1 163 3 is_stmt 1 view .LVU61
 163:Core/Src/main.c ****   {
 232              		.loc 1 163 7 is_stmt 0 view .LVU62
 233 0086 0521     		movs	r1, #5
 234 0088 03A8     		add	r0, sp, #12
 235 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  /tmp/ccSyKYKX.s 			page 12


 236              	.LVL6:
 163:Core/Src/main.c ****   {
 237              		.loc 1 163 6 view .LVU63
 238 008e 20B9     		cbnz	r0, .L14
 167:Core/Src/main.c **** 
 239              		.loc 1 167 1 view .LVU64
 240 0090 15B0     		add	sp, sp, #84
 241              	.LCFI3:
 242              		.cfi_remember_state
 243              		.cfi_def_cfa_offset 4
 244              		@ sp needed
 245 0092 5DF804FB 		ldr	pc, [sp], #4
 246              	.L13:
 247              	.LCFI4:
 248              		.cfi_restore_state
 152:Core/Src/main.c ****   }
 249              		.loc 1 152 5 is_stmt 1 view .LVU65
 250 0096 FFF7FEFF 		bl	Error_Handler
 251              	.LVL7:
 252              	.L14:
 165:Core/Src/main.c ****   }
 253              		.loc 1 165 5 view .LVU66
 254 009a FFF7FEFF 		bl	Error_Handler
 255              	.LVL8:
 256              	.L16:
 257 009e 00BF     		.align	2
 258              	.L15:
 259 00a0 00380240 		.word	1073887232
 260 00a4 00700040 		.word	1073770496
 261              		.cfi_endproc
 262              	.LFE136:
 264              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 265              		.align	2
 266              	.LC0:
 267 0000 6F6C6564 		.ascii	"oled1_ok\000"
 267      315F6F6B 
 267      00
 268 0009 000000   		.align	2
 269              	.LC1:
 270 000c 6F6C6564 		.ascii	"oled2_ok\000"
 270      325F6F6B 
 270      00
 271              		.section	.text.main,"ax",%progbits
 272              		.align	1
 273              		.global	main
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv4-sp-d16
 279              	main:
 280              	.LFB135:
  71:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 281              		.loc 1 71 1 view -0
 282              		.cfi_startproc
 283              		@ Volatile: function does not return.
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccSyKYKX.s 			page 13


 286 0000 00B5     		push	{lr}
 287              	.LCFI5:
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 14, -4
 290 0002 83B0     		sub	sp, sp, #12
 291              	.LCFI6:
 292              		.cfi_def_cfa_offset 16
  79:Core/Src/main.c **** 
 293              		.loc 1 79 3 view .LVU68
 294 0004 FFF7FEFF 		bl	HAL_Init
 295              	.LVL9:
  86:Core/Src/main.c **** 
 296              		.loc 1 86 3 view .LVU69
 297 0008 FFF7FEFF 		bl	SystemClock_Config
 298              	.LVL10:
  93:Core/Src/main.c ****   MX_DMA_Init();
 299              		.loc 1 93 3 view .LVU70
 300 000c FFF7FEFF 		bl	MX_GPIO_Init
 301              	.LVL11:
  94:Core/Src/main.c ****   MX_ADC1_Init();
 302              		.loc 1 94 3 view .LVU71
 303 0010 FFF7FEFF 		bl	MX_DMA_Init
 304              	.LVL12:
  95:Core/Src/main.c ****   MX_I2C1_Init();
 305              		.loc 1 95 3 view .LVU72
 306 0014 FFF7FEFF 		bl	MX_ADC1_Init
 307              	.LVL13:
  96:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 308              		.loc 1 96 3 view .LVU73
 309 0018 FFF7FEFF 		bl	MX_I2C1_Init
 310              	.LVL14:
  98:Core/Src/main.c **** 	OLED_ShowString(OLED_1,0,1,"oled1_ok",16);
 311              		.loc 1 98 2 view .LVU74
 312 001c FFF7FEFF 		bl	OLED_Init
 313              	.LVL15:
  99:Core/Src/main.c **** 	OLED_ShowString(OLED_2,0,1,"oled2_ok",16);
 314              		.loc 1 99 2 view .LVU75
 315 0020 1024     		movs	r4, #16
 316 0022 0094     		str	r4, [sp]
 317 0024 104B     		ldr	r3, .L20
 318 0026 0122     		movs	r2, #1
 319 0028 0021     		movs	r1, #0
 320 002a 7820     		movs	r0, #120
 321 002c FFF7FEFF 		bl	OLED_ShowString
 322              	.LVL16:
 100:Core/Src/main.c **** 	HAL_Delay(1);
 323              		.loc 1 100 2 view .LVU76
 324 0030 0094     		str	r4, [sp]
 325 0032 0E4B     		ldr	r3, .L20+4
 326 0034 0122     		movs	r2, #1
 327 0036 0021     		movs	r1, #0
 328 0038 7A20     		movs	r0, #122
 329 003a FFF7FEFF 		bl	OLED_ShowString
 330              	.LVL17:
 101:Core/Src/main.c **** 	OLED_Refreash();
 331              		.loc 1 101 2 view .LVU77
 332 003e 0120     		movs	r0, #1
ARM GAS  /tmp/ccSyKYKX.s 			page 14


 333 0040 FFF7FEFF 		bl	HAL_Delay
 334              	.LVL18:
 102:Core/Src/main.c **** 	HAL_Delay(40);
 335              		.loc 1 102 2 view .LVU78
 336 0044 FFF7FEFF 		bl	OLED_Refreash
 337              	.LVL19:
 103:Core/Src/main.c **** 	OLED_Refreash();
 338              		.loc 1 103 2 view .LVU79
 339 0048 2820     		movs	r0, #40
 340 004a FFF7FEFF 		bl	HAL_Delay
 341              	.LVL20:
 104:Core/Src/main.c **** 
 342              		.loc 1 104 2 view .LVU80
 343 004e FFF7FEFF 		bl	OLED_Refreash
 344              	.LVL21:
 106:Core/Src/main.c ****   /* USER CODE END 2 */
 345              		.loc 1 106 2 view .LVU81
 346 0052 0222     		movs	r2, #2
 347 0054 0649     		ldr	r1, .L20+8
 348 0056 0748     		ldr	r0, .L20+12
 349 0058 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 350              	.LVL22:
 110:Core/Src/main.c ****   /* Start scheduler */
 351              		.loc 1 110 3 view .LVU82
 352 005c FFF7FEFF 		bl	MX_FREERTOS_Init
 353              	.LVL23:
 112:Core/Src/main.c **** 
 354              		.loc 1 112 3 view .LVU83
 355 0060 FFF7FEFF 		bl	osKernelStart
 356              	.LVL24:
 357              	.L18:
 117:Core/Src/main.c ****   {
 358              		.loc 1 117 3 discriminator 1 view .LVU84
 122:Core/Src/main.c ****   /* USER CODE END 3 */
 359              		.loc 1 122 3 discriminator 1 view .LVU85
 117:Core/Src/main.c ****   {
 360              		.loc 1 117 9 discriminator 1 view .LVU86
 361 0064 FEE7     		b	.L18
 362              	.L21:
 363 0066 00BF     		.align	2
 364              	.L20:
 365 0068 00000000 		.word	.LC0
 366 006c 0C000000 		.word	.LC1
 367 0070 00000000 		.word	AD_TwoChanel_value
 368 0074 00000000 		.word	hadc1
 369              		.cfi_endproc
 370              	.LFE135:
 372              		.comm	AD_TwoChanel_value,8,4
 373              		.global	BMP1
 374              		.section	.data.BMP1,"aw"
 375              		.align	2
 378              	BMP1:
 379 0000 00060AFE 		.ascii	"\000\006\012\376\012\306\000\340\000\360\000\370\000"
 379      0AC600E0 
 379      00F000F8 
 379      00
 380 000d 00000000 		.ascii	"\000\000\000\000\000\376}\273\307\357\357\357\357\357"
ARM GAS  /tmp/ccSyKYKX.s 			page 15


 380      00FE7DBB 
 380      C7EFEFEF 
 380      EFEF
 381 001b EFEFC7BB 		.ascii	"\357\357\307\273}\376\000\000\000\000\000\000\000\000"
 381      7DFE0000 
 381      00000000 
 381      0000
 382 0029 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 382      00000000 
 382      00000000 
 382      00
 383 0036 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 383      00000000 
 383      00000000 
 383      00
 384 0043 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 384      00000000 
 384      00000000 
 384      00
 385 0050 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 385      00000000 
 385      00000000 
 385      00
 386 005d 0000080C 		.ascii	"\000\000\010\014\376\376\014\010 `\376\376` \000\000"
 386      FEFE0C08 
 386      2060FEFE 
 386      60200000 
 387 006d 007848FE 		.ascii	"\000xH\376\202\272\272\202\272\272\202\272\272\202\272"
 387      82BABA82 
 387      BABA82BA 
 387      BA82BA
 388 007c BA82FE00 		.ascii	"\272\202\376\000\000\000\000\000\000\000\000\000\000"
 388      00000000 
 388      00000000 
 388      00
 389 0089 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\001\001"
 389      00000000 
 389      00000101 
 389      01
 390 0096 01010101 		.ascii	"\001\001\001\001\001\001\001\001\001\001\000\000\000"
 390      01010101 
 390      01010000 
 390      00
 391 00a3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 391      00000000 
 391      00000000 
 391      00
 392 00b0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 392      00000000 
 392      00000000 
 392      00
 393 00bd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 393      00000000 
 393      00000000 
 393      00
 394 00ca 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 394      00000000 
ARM GAS  /tmp/ccSyKYKX.s 			page 16


 394      00000000 
 394      00
 395 00d7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 395      00000000 
 395      00000000 
 395      00
 396 00e4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 396      00000000 
 396      00000000 
 396      00
 397 00f1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 397      00000000 
 397      00000000 
 397      00
 398 00fe 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 398      00000000 
 398      00000000 
 398      00
 399 010b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 399      00000000 
 399      00000000 
 399      00
 400 0118 00000000 		.ascii	"\000\000\000\000\000\000\376\377\003\003\003\003\003"
 400      0000FEFF 
 400      03030303 
 400      03
 401 0125 03030303 		.ascii	"\003\003\003\003\377\377\000\000\376\377\003\003\003"
 401      FFFF0000 
 401      FEFF0303 
 401      03
 402 0132 03030303 		.ascii	"\003\003\003\003\003\003\377\376\000\000\000\000\300"
 402      0303FFFE 
 402      00000000 
 402      C0
 403 013f C0C00000 		.ascii	"\300\300\000\000\000\000\376\377\003\003\003\003\003"
 403      0000FEFF 
 403      03030303 
 403      03
 404 014c 03030303 		.ascii	"\003\003\003\003\377\376\000\000\376\377\003\003\003"
 404      FFFE0000 
 404      FEFF0303 
 404      03
 405 0159 03030303 		.ascii	"\003\003\003\003\003\003\377\376\000\000\000\000\000"
 405      0303FFFE 
 405      00000000 
 405      00
 406 0166 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 406      00000000 
 406      00000000 
 406      00
 407 0173 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 407      00000000 
 407      00000000 
 407      00
 408 0180 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 408      00000000 
 408      00000000 
ARM GAS  /tmp/ccSyKYKX.s 			page 17


 408      00
 409 018d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 409      00000000 
 409      00000000 
 409      00
 410 019a 00000000 		.ascii	"\000\000\000\000\377\377\000\000\000\000\000\000\000"
 410      FFFF0000 
 410      00000000 
 410      00
 411 01a7 0000FFFF 		.ascii	"\000\000\377\377\000\000\377\377\014\014\014\014\014"
 411      0000FFFF 
 411      0C0C0C0C 
 411      0C
 412 01b4 0C0C0C0C 		.ascii	"\014\014\014\014\377\377\000\000\000\000\341\341\341"
 412      FFFF0000 
 412      0000E1E1 
 412      E1
 413 01c1 00000000 		.ascii	"\000\000\000\000\377\377\000\000\000\000\000\000\000"
 413      FFFF0000 
 413      00000000 
 413      00
 414 01ce 0000FFFF 		.ascii	"\000\000\377\377\000\000\377\377\014\014\014\014\014"
 414      0000FFFF 
 414      0C0C0C0C 
 414      0C
 415 01db 0C0C0C0C 		.ascii	"\014\014\014\014\377\377\000\000\000\000\000\000\000"
 415      FFFF0000 
 415      00000000 
 415      00
 416 01e8 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 416      00000000 
 416      00000000 
 416      00
 417 01f5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 417      00000000 
 417      00000000 
 417      00
 418 0202 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 418      00000000 
 418      00000000 
 418      00
 419 020f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 419      00000000 
 419      00000000 
 419      00
 420 021c 00000F1F 		.ascii	"\000\000\017\037\030\030\030\030\030\030\030\030\030"
 420      18181818 
 420      18181818 
 420      18
 421 0229 1F0F0000 		.ascii	"\037\017\000\000\017\037\030\030\030\030\030\030\030"
 421      0F1F1818 
 421      18181818 
 421      18
 422 0236 18181F0F 		.ascii	"\030\030\037\017\000\000\000\000\000\000\000\000\000"
 422      00000000 
 422      00000000 
 422      00
ARM GAS  /tmp/ccSyKYKX.s 			page 18


 423 0243 00000F1F 		.ascii	"\000\000\017\037\030\030\030\030\030\030\030\030\030"
 423      18181818 
 423      18181818 
 423      18
 424 0250 1F0F0000 		.ascii	"\037\017\000\000\017\037\030\030\030\030\030\030\030"
 424      0F1F1818 
 424      18181818 
 424      18
 425 025d 18181F0F 		.ascii	"\030\030\037\017\000\000\000\000\000\000\000\000\000"
 425      00000000 
 425      00000000 
 425      00
 426 026a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 426      00000000 
 426      00000000 
 426      00
 427 0277 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 427      00000000 
 427      00000000 
 427      00
 428 0284 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 428      00000000 
 428      00000000 
 428      00
 429 0291 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 429      00000000 
 429      00000000 
 429      00
 430 029e 00000000 		.ascii	"\000\000\000\000\214B\"\022\014\000\374\002\002\002"
 430      8C422212 
 430      0C00FC02 
 430      0202
 431 02ac FC000004 		.ascii	"\374\000\000\004\376\000\000\000 XD\376@\000\020\020"
 431      FE000000 
 431      205844FE 
 431      40001010 
 432 02bc 10101000 		.ascii	"\020\020\020\000\000\004\376\000\000\000\374\002\002"
 432      0004FE00 
 432      0000FC02 
 432      02
 433 02c9 02FC0010 		.ascii	"\002\374\000\020\020\020\020\020\000\374\002\002\002"
 433      10101010 
 433      00FC0202 
 433      02
 434 02d6 FC000004 		.ascii	"\374\000\000\004\376\000\000\000\000\000\000\000\000"
 434      FE000000 
 434      00000000 
 434      00
 435 02e3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 435      00000000 
 435      00000000 
 435      00
 436 02f0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 436      00000000 
 436      00000000 
 436      00
 437 02fd 00000000 		.ascii	"\000\000\000\000$\244.$\344$.\244$\000\000\000\370J"
ARM GAS  /tmp/ccSyKYKX.s 			page 19


 437      24A42E24 
 437      E4242EA4 
 437      24000000 
 437      F84A
 438 030f 4C48F848 		.ascii	"LH\370HLJ\370\000\000\000\000\000\000\000\000\000\000"
 438      4C4AF800 
 438      00000000 
 438      00000000 
 438      00
 439 0320 00000101 		.ascii	"\000\000\001\001\001\001\001\000\000\001\001\001\000"
 439      01010100 
 439      00010101 
 439      00
 440 032d 00000101 		.ascii	"\000\000\001\001\001\000\000\000\000\000\001\001\000"
 440      01000000 
 440      00000101 
 440      00
 441 033a 00000000 		.ascii	"\000\000\000\000\000\000\000\001\001\001\000\000\000"
 441      00000001 
 441      01010000 
 441      00
 442 0347 01010100 		.ascii	"\001\001\001\000\000\000\000\000\000\000\000\000\001"
 442      00000000 
 442      00000000 
 442      01
 443 0354 01010000 		.ascii	"\001\001\000\000\000\001\001\001\000\000\000\000\000"
 443      00010101 
 443      00000000 
 443      00
 444 0361 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\300 \020"
 444      00000000 
 444      000000C0 
 444      2010
 445 036f 10101020 		.ascii	"\020\020\020 \300\000\000\300 \020\020\020\020 \300"
 445      C00000C0 
 445      20101010 
 445      1020C0
 446 037e 00000012 		.ascii	"\000\000\000\022\012\007\002\177\002\007\012\022\000"
 446      0A07027F 
 446      02070A12 
 446      00
 447 038b 00000B0A 		.ascii	"\000\000\013\012\012\012\177\012\012\012\013\000\000"
 447      0A0A7F0A 
 447      0A0A0B00 
 447      00
 448 0398 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 448      00000000 
 448      00000000 
 448      00
 449 03a5 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 449      00000000 
 449      00000000 
 449      00
 450 03b2 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 450      00000000 
 450      00000000 
 450      00
ARM GAS  /tmp/ccSyKYKX.s 			page 20


 451 03bf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 451      00000000 
 451      00000000 
 451      00
 452 03cc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 452      00000000 
 452      00000000 
 452      00
 453 03d9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 453      00000000 
 453      00000000 
 453      00
 454 03e6 00000000 		.ascii	"\000\000\000\000\000\000\037 @@@P _\200\000\037 @@@"
 454      00001F20 
 454      40404050 
 454      205F8000 
 454      1F204040 
 455 03fb 50205F80 		.ascii	"P _\200\000"
 455      00
 456              		.text
 457              	.Letext0:
 458              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 459              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 460              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 461              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 462              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 463              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 464              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 465              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 466              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 467              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 468              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 469              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 470              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 471              		.file 16 "Core/Inc/adc.h"
 472              		.file 17 "Core/Inc/i2c.h"
 473              		.file 18 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 474              		.file 19 "/usr/include/newlib/sys/_types.h"
 475              		.file 20 "/usr/include/newlib/sys/reent.h"
 476              		.file 21 "/usr/include/newlib/sys/lock.h"
 477              		.file 22 "/usr/include/newlib/stdlib.h"
 478              		.file 23 "Core/Inc/bmp.h"
 479              		.file 24 "Core/Inc/gpio.h"
 480              		.file 25 "Core/Inc/dma.h"
 481              		.file 26 "Core/Inc/oled.h"
 482              		.file 27 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 483              		.file 28 "<built-in>"
ARM GAS  /tmp/ccSyKYKX.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccSyKYKX.s:18     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccSyKYKX.s:26     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccSyKYKX.s:61     .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccSyKYKX.s:66     .text.Error_Handler:0000000000000000 $t
     /tmp/ccSyKYKX.s:73     .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccSyKYKX.s:105    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccSyKYKX.s:112    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccSyKYKX.s:259    .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccSyKYKX.s:265    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccSyKYKX.s:272    .text.main:0000000000000000 $t
     /tmp/ccSyKYKX.s:279    .text.main:0000000000000000 main
     /tmp/ccSyKYKX.s:365    .text.main:0000000000000068 $d
                            *COM*:0000000000000008 AD_TwoChanel_value
     /tmp/ccSyKYKX.s:378    .data.BMP1:0000000000000000 BMP1
     /tmp/ccSyKYKX.s:375    .data.BMP1:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_ADC1_Init
MX_I2C1_Init
OLED_Init
OLED_ShowString
HAL_Delay
OLED_Refreash
HAL_ADC_Start_DMA
MX_FREERTOS_Init
osKernelStart
hadc1
